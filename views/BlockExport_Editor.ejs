<!-- 
  @description: CodeB + DIY 병합
  @date: 2021.09.08
  @modifier: 정지현
  @did:
    - DIY 참고하여 리소스 파일 정리 (2000 Lines -> 약 800 Lines)
  @TODO:
    - 주석 정리 및 코드 정리 등의 리팩토링 전반
-->

<!DOCTYPE html>
<html>

<head profile="http://www.w3.org/2005/10/profile">

  <link rel="icon" type="image/png" href="http://example.com/myicon.png">

  <meta charset="utf-8" />
  <!-- 
    viewport(반응형 웹) :  여러 디스플레이 통해 접속 가능 
    width=device-width : 페이지 너비를 기기의 스크린 너비로 설정
    initial-scale=1 : 페이지 로딩 시 원래 크기를 사용 (확대, 축소 되지 않음)
  -->
  <!--for messagebox-->
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>CodeB</title>

  <!-- 코드비 동작에 필요한 초기 변수를 설정한다. -->
  <script>
    const parentUrl = "http://dev.inhatc.co.kr:8110";

    // 동작 환경을 초기화한다.
    let envMode = "<%=envMode%>";
    console.log(`===>서버 환경: ${envMode}`);
    
    let memberSeq = -1;
    let memberId = "";
    let projectId = -1;
    let projectType = 1; // 블록코딩 / 텍스트 코딩 Flag
    let projectXml = ""; // 프로젝트에서 사용자가 작업한 XML 데이터
    let usedLibs = ""; // 프로젝트에서 사용자가 추가한 라이브러리 배열
    let editorCheckYn = ""; // 사용자가 최초로 에디터에 접근하였는지 여부
    let isChallenge = 0; // 도전과제 여부

    // 라이브러리가 로딩 중인지를 나타내는 Flag
    let isImportLoading = 0;

    <% if(envMode == "spring") { %>
      /**
       * condition: spring
       * des: Spring 환경에서의 코드비 초기 변수를 설정한다.
       */ 

      // 프로젝트 아이디 설정
      projectId = <%=projectId%> == -1 ? -1 : <%=projectId%>

      /**
       * des: 프로젝트 첫 진입 시 서버로부터 프로젝트 타입을 받아와 블록/텍스트 코딩 타입을 지정한다.
       * 
       * 1. projectType이 비어있는 경우
       *  - 새 프로젝트를 시작하는 경우를 의미.
       *  - 사용자가 상단의 "블럭 | 블럭 + 코드 | 코드" 메뉴를 통해 타입을 지정할 수 있다.
       *  - 서버에 저장되면 현재 상태의 projectType을 함께 저장한다.
       * 
       * 2. projectType == 1
       *  - 사용자가 블록 코딩으로 서버에 저장한 경우
       *  - 사용자는 이 시점부터 상단의 "블럭 | 블럭 + 코드 | 코드" 메뉴를 선택할 수 없다.
       *  - 서버에 저장되면 항상 projectType = 1인 상태로 저장된다.
       *  - 로컬에 저장 시, "로컬 블록 저장", "로컬 코드 저장" 기능을 둘 다 사용할 수 있다.
       * 
       * 3. projectType == 2
       *  - 사용자가 텍스트 코딩으로 서버에 저장한 경우
       *  - 사용자는 이 시점부터 상단의 "블럭 | 블럭 + 코드 | 코드" 메뉴를 선택할 수 없다.
       *  - 서버에 저장되면 항상 projectType = 2인 상태로 저장된다.
       *  - 로컬에 저장 시, "로컬 코드 저장" 기능만 사용할 수 있다.
      */
      if(<%=projectType%> == 1) {
        projectType = 1;
      } else if(<%=projectType%> == 2) {
        projectType = 2;
      }

      // 프로젝트 XML 데이터 가져오기
      if(<%=projectId%> == -1) {
        projectXml = "";
      } else {
        let projectXmlWithEntity = "<%=xmlData%>";

        // 서버에서 가져온 XML에 대한 HTML Entity를 파싱
        if(projectXmlWithEntity !== undefined && projectXmlWithEntity !== null && projectXmlWithEntity !== '') {
              projectXmlWithEntity = String(projectXmlWithEntity);

              projectXmlWithEntity = projectXmlWithEntity.replace(/<script[^>]*>([\S\s]*?)<\/script>/gmi, '');
              projectXmlWithEntity = projectXmlWithEntity.replace(/<\/?\w(?:[^"'>]|"[^"]*"|'[^']*')*>/gmi, '');
              var element = document.createElement('div');
              element.innerHTML = projectXmlWithEntity;
              projectXml = element.textContent;
              element.textContent = '';
        }
      }

      // 멤버 시퀀스 설정
      memberSeq = <%=memberSeq%> == -1 ? -1 : <%=memberSeq%>;

      // 멤버 아이디 설정
      memberId = "<%=memberId%>";
      
      // 사용자가 추가한 라이브러리 배열 설정
      usedLibs = "<%=usedLibs%>";
      
      // 에디터 최초 접근 여부 설정
      editorCheckYn = "<%=editorCheckYn%>";
      
      // 도전과제 여부 설정
      isChallenge = <%=isChallenge%> == -1 ? 0 : <%=isChallenge%>;
    <% } %>

    console.log(`===>Project ID: ${projectId}`);
    console.log(`===>Project Type: ${projectType}`);
    console.log("---xmlData---");
    console.log(projectXml);
    console.log("-------------");
    console.log(`===>Member Seq: ${memberSeq}`);
    console.log(`===>Member ID: ${memberId}`);
    console.log(`===>Used Libs: ${usedLibs}`);
    console.log(`===>Editor checked before: ${editorCheckYn}`);
    console.log(`===>Is challenge: ${isChallenge}`);
  </script>
  
  <script type="text/javascript" src="/js/cdn_script.js"></script>
  <script type="text/javascript" src="/js/css_script.js"></script>
  <script type="text/javascript" src="/js/resources_script.js"></script>
  <script type="text/javascript" src="/js/blocks_script.js"></script>

  <script>
    setCookie("download_block", "", 1);

    // Matplotlib 로직에서 사용하는 변수 (?) 
    var DL_Gra = 0;
  </script>
</head>

<body>
  <script src="/js/utils/blockCodes.js"></script>

  <!-- 언어 패키지, 카테고리 색상 -->
  <!-- 2020-12-05 양승국 동적 변경을 위해 head -> body로 옮김-->
  <script id="lan" src="/js/blockly/msg/js/ko.js"></script>

  <!-- 라이브러리 추가 모달창 -->
  <div class="libraryDiv modal fade" id="libraryDiv">
    <div class="modal-dialog"></div>
    <div class="header" style="width:96%">
      <img src="/lib_logos/Library_Title.png" style="margin: 5px;">
      <hr style="border: solid 1px white;
        width: 72%;
        display: inline-block;
        margin-bottom: -5px;">
      <img id="modal_close_btn" class="large close icon" src="/lib_logos/close.png" data-dismiss="modal"
        aria-label="Close">
    </div>
    <!-- 카드 -->
    <div class="libraryGrid">
      <!-- 컬럼 -->
      <div class="column">
        <!-- 카드 상세 -->
        <div class="ui fluid">
          <div class="libraryimage">
            <img src="/lib_logos/scikit-image.png">
          </div>
          <div class="content">
            <a class="header">이미지 프로세싱</a>
            <div class="description">
              다양한 이미지를 처리할 수 있는 Scikit-Image가 포함된 라이브러리입니다.<br>
            </div>
          </div>
          <div id="image_processing_import_btn" data-id="3" data-is-imported="0" class="importBtn">
            추가
          </div>
        </div>
      </div>
      <!-- 컬럼 -->
      <div class="column">
        <!-- 카드 상세 -->
        <div class="ui fluid">
          <div class="libraryimage">
            <img src="/lib_logos/biopython.png">
          </div>
          <div class="content">
            <a class="header">바이오 파이썬</a>
            <div class="description">
              생물정보학 프로그래밍을 위한 라이브러리입니다.<br>
            </div>
          </div>
          <div id="bio_import_btn" data-id="2" class="importBtn">
            추가
          </div>
        </div>
      </div>
    </div>
  </div>

  <% if(envMode == "spring") { %>
    <div class="saveProjectList modal fade" id="saveProjectList">
      <div class="modal-dialog"></div>
      <div class="header">
        <h2 class="saveGroupTitle" style="font-size: 24px; font-weight: bold;"></h2>
        덮어쓰기 하실 프로젝트를 선택하세요.<br><span>※기존 데이터는 삭제됩니다.</span>
      </div>
      <!-- 카드 -->
      <div class="libraryGrid">
        <table class="table table-striped projectListTable">
          <colgroup>
            <col width="30%" />
            <col width="30%" />
            <col width="30%" />
            <col width="10%" />
          </colgroup>
          <tr>
            <th>제목</th>
            <th>설명</th>
            <th>날짜</th>
            <th>선택</th>
          </tr>
          <tr>
            <td>제목11</td>
            <td>블록코딩 프로젝트입니다.</td>
            <td>2021. 05. 04.</td>
            <td><button>선택</button></td>
          </tr>
          <tr>
            <td>제목11</td>
            <td>블록코딩 프로젝트입니다.</td>
            <td>2021. 05. 04.</td>
            <td><button>선택</button></td>
          </tr>
          <tr>
            <td>제목11</td>
            <td>블록코딩 프로젝트입니다.</td>
            <td>2021. 05. 04.</td>
            <td><button>선택</button></td>
          </tr>
          <tr>
            <td>제목11</td>
            <td>블록코딩 프로젝트입니다.</td>
            <td>2021. 05. 04.</td>
            <td><button>선택</button></td>
          </tr>
          <tr>
            <td>제목11</td>
            <td>블록코딩 프로젝트입니다.</td>
            <td>2021. 05. 04.</td>
            <td><button>선택</button></td>
          </tr>
          <tr>
            <td>제목11</td>
            <td>블록코딩 프로젝트입니다.</td>
            <td>2021. 05. 04.</td>
            <td><button>선택</button></td>
          </tr>
        </table>
        <button data-dismiss="modal" aria-label="Close" class="project">닫기</button>
  
      </div>
    </div>
  <% } %> 

  <div id="loading" class="ui segment loadingSetting">
    <div id="loading_dimmer" class="ui active dimmer">
      <div id="loading_inner_text" class="ui huge text loader"><b>초기 설정 중...</b><br><br>네트워크 환경에 따라 시간이 다소 소요될
        수
        있습니다.</div>

    </div>
    <!-- 그래프 사이드바 start-->
    <aside id="sidebar">
      <!-- 그래프 사이드바 닫기 버튼 -->
      <div class="sidebar">
        <button id="runButton2" class="btn btn-outline-success btn-sm mr-1" onclick="runButton();"
          style="display:none;">실행</button>
        <!-- 실행 로딩 중 -->
        <div id="loading_image2" style="display: inline-block;">
          <object type="image/svg+xml" data="Rolling-1s-30px.svg"></object>
        </div>
        <button id="button_close" class="btn btn-outline-primary btn-sm mr-1" onclick="sidebar_toggle();">닫기</button>
        <button id="button_clear" class="btn btn-outline-danger btn-sm" onclick="csv_clear();">지우기</button>
        <button id="button_reset" class="btn btn-outline-danger btn-sm" onclick="sidebar_clear();">전체 초기화</button>
      </div>

      <div id=graph></div>

      <div id=graph1 style="height:500px; width:900px;"><img id="pyplotfigure" /></div>
      <!-- <div id=graph2 style="height: 300px;"></div> 
      <div id=graph3 style="height: 300px;"></div>-->
      <div id="csv_show"></div>
    </aside>
    <!-- 그래프 사이드바 end-->

    <div class="container-fluid" style="min-width: 1189px;">
      <!-- nav -->
      <nav class="navbar navbar-expand-lg navbar-dark" style="background-color: #f4f6ff;">
        <!-- a -->
        <a class="navbar-brand" href="/"><img src="/logo2-2.png" /></a>

        <!-- 왼쪽 구역-->
        <div class="btnDiv">
          <div class="d-flex flex-wrap text-white">

            <!-- 파일 열기 -->
            <div class="div-wrap-pull-localBlock">
              <input type="file" id="file" class="" accept="text/xml, .zip"
                onchange="loadBlock(); this.value=null;return false;">
              <label for="file">
                <span class="blockFileLoad">파일 가져오기</span>
                <span class="codebBtn"><img src="/search.png" alt=""></span>
              </label>
              <!-- <label class="custom-file-label mr-1" for="file">파일열기</label> -->
            </div>

            <!-- 
              condition: node / spring
              des: 블록 지우기 (전체 초기화 / 프로젝트 초기화) - Bootstrap 2021-08-17 정지현 
            -->
            <% if(envMode == "spring") { %> 
              <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle codebBtn" type="button" data-toggle="dropdown"
                  aria-haspopup="true" aria-expanded="false">
                  <img src="/reset.png" alt="초기화">
                  초기화
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownReset" id="dropdown_reset_menu">
                  <span class="dropdown-item codebBtnDropdown" onclick="resetWorkspace();">
                    <i class="trash icon"></i>
                    전체 초기화
                  </span>
                  <!-- 새 프로젝트 일 경우 프로젝트 초기화 버튼 비활성화 -->
                  <% if(projectId != -1) { %>
                    <span class="dropdown-item codebBtnDropdown" onclick="resetProject();">
                      <i class="undo icon"></i>
                      프로젝트 초기화
                    </span>
                  <% } %> 
                </div>
              </div>
            <% } else { %>
              <!-- Node.js 환경 블록 지우기 -->
              <span id="button_block_del" class="codebBtn" onClick="resetWorkspace();">
                <span class="codebBtnIcon"><img src="/reset.png" alt="초기화"></span>
                <span class="codebBtnText">초기화</span>
              </span>
            <% } %> 

            <!-- 블록 저장 -->
            <!-- <c:if test="${isChallenge != 1}"> -->
            <!-- </c:if> -->

            <!-- 
              condition: node / spring
              des: 블록 저장 (클라우드 / 로컬) - Bootstrap 2021-08-17 정지현
              FIXME: 클라우드 저장 submenu 위치 고치기
              TODO: 서버에 프로젝트 저장 시 탭에 대한 저장을 어떻게 할지 고려할 것.
            -->
            <% if(envMode == "spring") { %>
              <div class="dropdown top">
                <button class="btn btn-secondary dropdown-toggle codebBtn" type="button" data-toggle="dropdown"
                  aria-haspopup="true" aria-expanded="false">
                  <img src="/prjSave.png" alt="저장">
                  저장
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownSave" id="dropdown_save_menu">
                  <!-- 도전과제가 아닐 경우 클라우드 블록 저장 활성화 -->
                  <c:if test="${isChallenge != 1}">
                  <% if(isChallenge != 1) { %>
                    <div class="dropdown-header">
                      클라우드
                    </div>
  
                    <div class="dropdown-submenu">
                      <span class="dropdown-item dropdown-toggle cloudIconRotate"><i
                          class="cloud upload icon"></i>클라우드 저장</span>
                      <div class="dropdown-menu">
                        <span class="dropdown-item codebBtnDropdown" onclick="saveCodesToServer(true);">
                          새로운 프로젝트 저장
                        </span>
  
                        <span class="dropdown-item codebBtnDropdown thisProjectBtn" onclick="saveCodesToServer(false);"
                          style="display:none;">
                          현재 프로젝트 저장
                        </span>
  
  
                        <span class="dropdown-item codebBtnDropdown"
                          onclick="$('#saveProjectList').modal({ backdrop: 'static' });">
                          다른 프로젝트 저장
                        </span>
                      </div>
                    </div>
  
                    <div class="dropdown-divider"></div>
                  <% } %> 
                  <div class="dropdown-header">로컬</div>
                  <!-- FIXME: 프로젝트 타입에 따라서 저장되는 압축 파일 결과물이 달라져야함. -->
                  <span id="span_local_file_save" class="dropdown-item codebBtnDropdown"
                    onclick="saveCodesToLocal();">
                    <i class="file archive icon"></i>
                    로컬 프로젝트 저장(Zip)
                  </span>
                  <span id="span_local_block_save" class="dropdown-item codebBtnDropdown"
                    onclick="saveCodeAsXML();">
                    <i class="cubes icon"></i>
                    로컬 블록 저장(XML)
                  </span>
                  <span id="span_local_code_save" class="dropdown-item codebBtnDropdown"
                    onclick="saveCodeAsPy();">
                    <i class="code icon"></i>
                    로컬 코드 저장(Py)
                  </span>
                </div>
              </div>
            <% } else { %>
              <span id="button_block_save" class="codebBtn codebBtn-mobile-size" onclick="saveCodeAsXML()">
                <span class="codebBtnIcon"><img src="/prjSave.png" alt="블록 저장"></span>
                <span class="codebBtnText">블록 저장</span>
              </span>
              <span id="button_block_save" class="codebBtn codebBtn-mobile-size" onclick="saveCodesToLocal()">
                <span class="codebBtnIcon"><img src="/prjSave.png" alt="프로젝트 저장"></span>
                <span class="codebBtnText">프로젝트 저장</span>
              </span>
            <% } %> 

            <!-- 블록 탭 -->
            <div class="btn-group" role="group">
              <span class="codebBtn" onclick="visibleBlock()"><span class="codebBtnText">블럭</span></span>
              <span class="codebBtn" onclick="visibleAll()"><span class="codebBtnText">블럭 + 코드</span></span>
              <span class="codebBtn" onclick="visibleCode()"><span class="codebBtnText">코드</span></span>
            </div>

          </div>

          <!-- 해상도 디바이더 -->
          <div class="div-editor-divider"></div>

          <!-- 오른쪽 구역 -->
          <div class="d-flex flex-wrap text-white">

            <!-- 실행 로딩 중 -->
            <span id="loading_icon" class="loadingIcon">
              <i id="loading_image1" class="big spinner loading icon loadingPosition"></i>
              <p id="loading_text">불러오는 중...</p>
            </span>

            <!-- 문제 보기 프로토 -->
            <% if(envMode == "spring" && isChallenge == 1) { %>
              <span id="sidebar_asgn" class="codebBtn">
                <span class="codebBtnIcon"><img src="/assignment.png" alt="문제"></span>
                <span class="codebBtnText">문제 보기</span>
              </span>
            <% } %> 

            <% if(envMode == "node") { %>
              <span id="button_block_save" class="codebBtn codebBtn-mobile-size" onclick="saveCodeAsPy()">
                <span class="codebBtnIcon"><img src="/prjSave.png" alt="코드 저장"></span>
                <span class="codebBtnText">코드 저장</span>
              </span>
            <% } %>
            <span id="sidebar_add_libs" class="codebBtn" data-toggle="modal" data-target="#libraryDiv">
              <span class=" codebBtnIcon"><img src="/library.png" alt="라이브러리 추가"></span>
              <span class="codebBtnText">라이브러리 추가</span>
            </span>
            <span id="sidebar_graph" class="codebBtn" onclick="sidebar_toggle()">
              <span class="codebBtnIcon"><img src="/graph.png" alt="그래프"></span>
              <span class="codebBtnText">그래프</span>
            </span>

          <!-- 사용한 파일 저장 --> 
          <span id="button_block_save" class="codebBtn" onclick="file_use_Download();">
            <!-- <i class="sign out icon"></i> -->
            <span class="codebBtnIcon">
              <i class="save icon"></i>
            </span>
            <span class="codebBtnText">사용한 파일 저장</span>
          </span>

            <span id="exit_button" class="codebBtn" onclick="handleClickMenuToggle();">
              <!-- <i class="sign out icon"></i> -->
              <span class="codebBtnIcon"><img src="/settings.png" alt="나가기" style="width: 15px;"></span>
              <span class="codebBtnText">설정</span>
            </span>

            <% if(envMode == "spring") { %>
              <!-- 나가기 -->
              <span id="exit_button" class="codebBtn" onclick="checkExit();">
                <span class="codebBtnIcon"><img src="/exit2.png" alt="나가기"></span>
                <span class="codebBtnText">나가기</span>
              </span>
            <% } %> 

            <!-- 라이브러리 추가 -->
            <!-- Modal -->
            <div class="modal fade" id="libraryBox" data-backdrop="static" data-keyboard="false" tabindex="-1"
              aria-labelledby="libraryBoxLabel" aria-hidden="true">
              <div class="modal-dialog" style="max-width: 50%;">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title" id="libraryBoxLabel">라이브러리 추가</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                      <span aria-hidden="true">&times;</span>
                    </button>
                  </div>

                  <div class="modal-body">
                    <table class="libListBox">
                      <colgroup>
                        <col width="15%" />
                        <col width="70%" />
                        <col width="15%" />
                      </colgroup>

                    </table>
                    <!-- canvas -->
                  </div>


                </div>
              </div>
            </div>
            <!-- 모달 -->
            <!-- 2020-12-05 양승국 언어변경을 위해 생성-->
            <!--언어변환 -->
            <!-- <select id="language" class="form-control col-md-2 mt-2 ml-1">
<option id = "ko" value="kor">Ko</option>
<option id = "en" value="eng">en</option>
</select> -->

          </div>
        </div>
      </nav>

      <!-- FIXME: 하단 jsp:include 동작 -->
      <% if(envMode == "spring" && isChallenge == 1) { %>
        <div class="sidebarData" style="color: white">
          <!-- <div class="asgnClose">
            <i class="inverted large close icon" onclick="closeSideBar()"></i>
              </div> -->
                <!-- 문제 삽입 -->
                <!-- <jsp:include page="${challengeInfo[0].asgn_path}${challengeInfo[0].asgn_name}" /> -->
        </div>
      <% } %> 

      <!--####### 은선 - tab 추가 #######-->
      <!-- tab style-->

      <!--tab 목록-->
      <!-- <div class="container"> -->
      <!-- 탭 메뉴 -->
      <!-- <div id="tab_unm" class="tabs">
        <ul class="tab">
          <li class="tab-link current" data-tab="tab-1" style="margin-left: 10px;">
            <a class="tab" id='tab_1'>Tab - 1</a>
          </li>
      
          <li class="tab-link" data-tab="tab-2">
            <a class="tab" id='tab_2'>Tab - 2</a>
          </li>
      
          <li class="tab-link" data-tab="tab-3">
            <a class="tab" id='tab_3'>Tab - 3</a>
          </li>
        </ul>
      </div> -->
    <script>
      //왼쪽 스크립트
      $(document).ready(function () {

        var tab_id = 0;

        $('.tabImg').click(function () {
          tab_id = $(this).attr('data-tab');
          console.log("sdASD");

          $('.tabImg').removeClass('current');
          $('.tab-content').removeClass('current');

          $(this).addClass('current');
          $("#" + tab_id).addClass('current');

          console.log(tab_id);
        })
      });
    </script>

      <!-- 하단 내용 -->
      <div id="bottomDiv">

        <!-- 블럭 나오는 부분(왼쪽) -->
        <div id="blocklyDiv" class="borderR">
          <div id="tab-1" class="tab-content current">
            <div id="blocklyDiv1" style="height: calc(100vh - 90px);">
              <div class="windowTitle" id="windowBlockTitle">
                블록(Block)
                <img src="/img/actv_tab.png" alt="활성화 탭" id="tab_1" class="tabImg tab-link current" data-tab="tab-1" />
                <img src="/img/unactv_tab.png" alt="비활성화 탭" id="tab_2" class="tabImg tab-link" data-tab="tab-2" />
                <img src="/img/unactv_tab.png" alt="비활성화 탭" id="tab_3" class="tabImg tab-link" data-tab="tab-3" />
                <div class="workspaceBtns">
                  <span class="workspaceFocus" onclick="workspaceFocusEvent();"></span>
                  <span class="workspacePlus" onclick="workspaceMinusEvent();"></span>
                  <span class="workspaceMinus" onclick="workspacePlusEvent();"></span>
                </div>
              </div>
              <div style="position: relative; border: 5px solid #787878; left: 168px; width: 100%; margin-top: -11px;"></div>
            </div>
          </div>
      
          <div id="tab-2" class="tab-content">
            <div id="blocklyDiv2" style="height: calc(100vh - 90px);">
              <div class="windowTitle" id="windowBlockTitle">
                블록(Block)
                <img src="/img/unactv_tab.png" alt="비활성화 탭" id="tab_1" class="tabImg tab-link" data-tab="tab-1" />
                <img src="/img/actv_tab.png" alt="활성화 탭" id="tab_2" class="tabImg tab-link current" data-tab="tab-2" />
                <img src="/img/unactv_tab.png" alt="비활성화 탭" id="tab_3" class="tabImg tab-link" data-tab="tab-3" />
                <div class="workspaceBtns">
                  <span class="workspaceFocus" onclick="workspaceFocusEvent();"></span>
                  <span class="workspacePlus" onclick="workspaceMinusEvent();"></span>
                  <span class="workspaceMinus" onclick="workspacePlusEvent();"></span>
                </div>
              </div>
              <div style="position: relative; border: 5px solid #787878; left: 168px; width: 100%; margin-top: -11px;"></div>
            </div>
          </div>
      
          <div id="tab-3" class="tab-content">
            <div id="blocklyDiv3" style="height: calc(100vh - 90px);">
              <div class="windowTitle" id="windowBlockTitle">
                블록(Block)
                <img src="/img/unactv_tab.png" alt="비활성화 탭" id="tab_1" class="tabImg tab-link" data-tab="tab-1" />
                <img src="/img/unactv_tab.png" alt="비활성화 탭" id="tab_2" class="tabImg tab-link" data-tab="tab-2" />
                <img src="/img/actv_tab.png" alt="활성화 탭" id="tab_3" class="tabImg tab-link current" data-tab="tab-3" />
                <div class="workspaceBtns">
                  <span class="workspaceFocus" onclick="workspaceFocusEvent();"></span>
                  <span class="workspacePlus" onclick="workspaceMinusEvent();"></span>
                  <span class="workspaceMinus" onclick="workspacePlusEvent();"></span>
                </div>
              </div>
              <div style="position: relative; border: 5px solid #787878; left: 168px; width: 100%; margin-top: -11px;"></div>
            </div>
          </div>

        </div>

        <!-- 블럭-코드 스플릿 바 -->
        <div class="gutter-col gutter-col-block-code"></div>

        <!-- 오른쪽 -->
        <div id="codeDiv">
          <div id="codeDiv1" class="borderR">
            <div class="card shadow-sm splitDiv">
              <div class="text-white">
                <div class="windowTitle" id="code">
                  코드(Code)
                  <button id="btn_block_code" onclick="toggleBlockCode();" class="ui inverted green button">블록코드
                    On</button>
                </div>
              </div>
              <div class="splitDiv" style="position: relative; height: calc(100% - 57px);">
                <div id="pyCodeEditor" class="splitDiv"></div>
                <div id="asyncCodeEditor" class="splitDiv"></div>
                <div id="jsCodeEditor" class="splitDiv"></div>
              </div>
            </div>
          </div>

          <!-- 코드-콘솔 스플릿 바 -->
          <div class="gutter-row gutter-row-code-console"></div>
          <div class='gutter-col gutter-col-code-console'></div>

          <!-- console -->
          <div id="codeDiv2" class="borderR">
            <div class="card mb-6 mt-6 shadow-sm splitDiv">
              <div class="text-white">
                <div class="windowTitle" id="console">
                  <span alt="실행버튼" id="runButton1"></span>
                  <span alt="지우기" id="button_console_clear" onclick="resetConsole();"></span>
                  콘솔(Console)
                </div>
              </div>
              </textarea>
              <textarea id="exeArea" class="form-control splitDiv" readonly style="resize: none;"></textarea>
            </div>
          </div>
        </div> <!-- 오른쪽 -->
      </div> <!-- 하단 -->

      <!-- camera-->
      <!--
<video id="gum-local" autoplay playsinline></video>
<button id="showVideo">Open camera</button>
-->
    </div> <!-- container -->

    <!-- TODO: 여기에다가 js파일을 둬야하는지에 대한 여부 체크 -->
    <script src="/js/utils/codeMirror.js"></script>
    <script src="/js/utils/basicFunctions.js"></script>
    <script src="/js/utils/blockFunctions.js"></script>

    <!-- Toolbox 정의 -->
    <script>
      let addedLibs = [];
    <% if(envMode == "spring") { %>
      // 사용자가 추가한 라이브러리 목록을 담을 비어있는 배열 생성

      // 새 프로젝트 저장 여부를 나타내는 Flag
      let isSaved = 0;

      // TODO: 이하 로직이 무엇을 하는지 파악해볼 것.
      var projectLists = [];

      function reloadTableData() {
        if (projectType == 1) {
          $(".saveGroupTitle").html("Block전용 저장")
        } else {
          $(".saveGroupTitle").html("Code전용 저장")
        }
        $(".projectListTable").html('<colgroup><col width="30%" /><col width="30%" /><col width="30%" /><col width="10%" /></colgroup><tr><th>제목</th><th>설명</th><th>날짜</th><th>선택</th></tr>');
        var tableElem = document.getElementsByClassName("projectListTable")[0]
        for (var i = 0; i < projectLists.length; i++) {
          // if(projectLists[i].project_type == projectType) {
          if (projectLists[i].project_type == projectType) {
            var trElem = document.createElement('tr')
            var td1Elem = document.createElement('td')
            var td2Elem = document.createElement('td')
            var td3Elem = document.createElement('td')
            var td4Elem = document.createElement('td')
            var selectElemBtn = document.createElement('button');
            selectElemBtn.onclick = function () {
              // console.log($(this).find('button')attr('idx'));
              projectId = Number($(this).attr('idx'));
              $('.saveProjectList').modal("hide");
              setTimeout(function () {
                saveCodesToServer(false)
              }, 200)
            }
            $(selectElemBtn).attr('idx', projectLists[i].id)
            $(selectElemBtn).attr('type', "button")
            $(selectElemBtn).attr('class', "btn btn-primary")
            $(selectElemBtn).html("선택")

            td1Elem.innerHTML = projectLists[i].title
            td2Elem.innerHTML = projectLists[i].description
            td3Elem.innerHTML = projectLists[i].reg_date
            // td4Elem.innerHTML = '<button idx="'+projectLists[i].id+'">선택</button>';
            console.log(projectLists[i].id)
            td4Elem.appendChild(selectElemBtn)
            trElem.appendChild(td1Elem)
            trElem.appendChild(td2Elem)
            trElem.appendChild(td3Elem)
            trElem.appendChild(td4Elem)
            tableElem.appendChild(trElem);
          }
        }
      }

      /*
      * 현재 프로젝트가 사용자의 첫 번째 프로젝트인지에 대한 Flag
      * checkExit(); 동작 시 메인 페이지로 리다이렉트 여부를 결정하기 위함.
      */ 
      let isFirstProject;
    <% } %>

    // DOM 생성 시 호출되는 초기화 함수 생성
    $(function() {
      console.log("[DOM] 생성 완료.");

      // Blockly 블록의 텍스트 최대 출력 길이를 100으로 설정한다.
      Blockly.FieldTextInput.prototype.maxDisplayLength = 100;

      <% if(envMode == "spring") { %>
        // 사용자가 처음으로 생성한 프로젝트인지 검사한다.
        parent.postMessage({
          "from": "getIsFirstProject",
          "reqThisUrl": true
        }, parentUrl)

        // FIXME: 다른 프로젝트 저장 버튼 클릭 시 실행되는 로직, 다른 파일로 빼낼 것
        $("#saveProjectList").on('show.bs.modal', function (event) {
          // not setting focus to submit button
          // 프로젝트 테이블

          parent.postMessage({
            "from": "saveProjectList",
            "url": "/project/list/json.do",
            "dataType": "json"
          }, parentUrl)
        });
        $('.dropdown-menu span.dropdown-toggle').on('click', function (e) {
          if (!$(this).next().hasClass('show')) {
            $(this).parents('.dropdown-menu').first().find('.show').removeClass("show");
          }
          var $subMenu = $(this).next(".dropdown-menu");
          $subMenu.toggleClass('show');


          $(this).parents('.top.dropdown.show').on('hidden.bs.dropdown', function (e) {
            $('.dropdown-submenu .show').removeClass("show");
          });


          return false;
        });  
        
        /**
         * condition: spring
         * des: 도전과제일 경우 문제 XML을 출력한다. 
         */ 
        // FIXME: 하단 도전과제 XML 불러오기 로직 수정할 것.
        if(isChallenge == 1) {
          let challengeXmlData = "이곳에 challengeXMLData를 넣기."
          let dom = Blockly.Xml.textToDom(challengeXmlData);
          Blockly.Xml.appendDomToWorkspace(dom, "워크스페이스명 ex.)workspace");
        }

        /**
         * condition: spring
         * des: 도전과제일 경우 문제에 대한 사이드바(JSP)를 출력하며, 클릭 이벤트를 통해 제어한다.
         * flag:  0: 사이드바가 닫혀있는 상태
         *        1: 사이드바가 열려있는 상태
         */ 
        let sidebarFlag = 1;
        $(".ui.labeled.icon.sidebar").sidebar("setting", "dimPage", false); // Dim Out
        $(".ui.labeled.icon.sidebar").sidebar("setting", "closable", false); // 마우스 클릭 시 No closing
        $(".ui.labeled.icon.sidebar").sidebar("setting", "transition", "overlay"); // 오버레이

        $("#sidebar_asgn").click(function () {
          if (sidebarFlag == 0) {
            sidebarFlag = 1;
            setPageSize(sidebarFlag);
          } else {
            sidebarFlag = 0;
            setPageSize(sidebarFlag);
          }
          // $(".ui.labeled.icon.sidebar").sidebar("toggle");
        })

        /**
         * condition: spring
         * des: 사용자가 에디터 최초 접근 시 튜토리얼 진행 여부를 확인한다.
         */
        // TODO: 튜토리얼 동작 여부를 확인해야 함. 다솜님이 만들어놓은 튜토리얼을 최우선적으로 살릴 필요 존재
        // FIXME: 제대로 동작하지 않을 경우, 로직을 수정해야 함.
        if (editorCheckYn == 'N') {
          Swal.fire({
            icon: 'info',
            title: '튜토리얼',
            html: '처음 들어오셨군요!<br>튜토리얼을 시작하시겠어요?',
            showDenyButton: true,
            confirmButtonText: '네',
            denyButtonText: '아니요'
          }).then((result) => {
            if (result.isConfirmed) {
              showTutorial();
            } else if (result.isDenied) {
              Swal.fire({
                icon: 'info',
                html: '튜토리얼은 상단의 도움말 버튼을 통해<br>다시 볼 수 있습니다.',
                confirmButtonText: '확인'
              })
            }
          })

          // des: 사용자가 튜토리얼 확인 히 EditorCheck를 Y로 업데이트
          parent.postMessage({
            "from": "setEditorCheckToYes",
            "url": "/editor/updateEditorCheck.do",
            "method": "POST",
            "data": { "editorCheck": "Y" }
          }, parentUrl);
        }

        /**
         * condition: spring
         * des: 프로젝트로 접근 시, 불러온 XML 데이터를 Workspace에 배정한다. 
         */ 
        // XML이 Pandas CSV 읽기 블록을 사용할 경우, 인자값을 "경로"로 초기화 한다.
        // TODO: 이하 로직을 동일한 역할을 하는 다른 로직과 병합한 후, 함수로 합칠 수 있는지 여부 체크하기.
        for (var i = 0; i < projectXml.length;) {
          if (projectXml.indexOf('field name="file_path', i) == -1) {
            i++; // 일치하는 값이 없을 시 증가
          } else {
            i = projectXml.indexOf('field name="file_path', i) + 1; // 중복 값 출력 방지용
            var b = projectXml.indexOf('</field>', i)
            var q = projectXml.substring(i + 22, b)
            //console.log(i)
            //console.log('서브: ', q)
            projectXml = projectXml.replace(q, '경로')
          }
        }

        // Workspace DOM에 불러온 XML을 삽입한 후, 파이썬 코드를 CodeMirror에 세팅한다.
        if (projectXml != "" && projectType == 1) {
          console.log("===>블록 코딩 XML이 화면에 출력됩니다.");
          let dom = Blockly.Xml.textToDom(projectXml);
          let currentWs = workspaceCheck(); // 현재 포커싱된 워크스페이스 가져오기
          Blockly.Xml.appendDomToWorkspace(dom, currentWs);

          // FIXME: 주석한 후, 동작 수행에 문제 없을 경우 제거
          // fileName = file.name;

          try {
            let pyCode = Blockly.Python.workspaceToCode(currentWs);
            pyEditor.setValue(pyCode);
          } catch (e) {
            console.log("===>파이썬 코드 출력을 처리하는 도중 오류가 발생하였습니다.")
            console.log(e);
          }

          try {
            let jsCode = Blockly.JavaScript.workspaceToCode(currentWs);
            jsEditor.getValue() = jsCode;
          } catch (e) {
            console.log("===>자바스크립트 코드 출력을 처리하는 도중 오류가 발생하였습니다.")
            console.log(e);
          }
        } else if (projectXml != "" && projectType == 2) {
          console.log("===>텍스트 코딩 Python 코드가 화면에 출력됩니다.");
          pyEditor.setValue(projectXml);
        }
      <% } %>

      /**
       * condition: node / spring
       * des: 라이브러리 추가 버튼 클릭 시 모달창을 동작한다.
       */ 
      $("#sidebar_add_libs").on("click", function () {
        $('#libraryDiv').modal({ backdrop: 'static' });
      })

      /**
       *  condition: node / spring
       * des: runButton1을 클릭하면 현재 코드비를 통해 작성한 로직이 실행된다.
       */ 
      $("#runButton1").on('mouseup', function () {
        showCodeLoading();
        setTimeout(() => {
          runButton()
        }, 300);
      })
    })
    
    /**
     * condition: node / spring
     * des: 코드비의 Blockly 워크스페이스를 정의한다. (탭 3개 - Workspace 1, 2, 3)
     */ 
    let Workspace1 = Blockly.inject(
      "blocklyDiv1", {
        // 툴박스 출력
        toolbox: toolbox, 
        // 그리드 출력
        grid: {
          spacing: 0,
          length: 3,
          colour: '#ccc',
          snap: true
        },
        // 워크스페이스 줌 설정
        zoom: {
        controls: true,
        wheel: true,
        startScale: 1.0,
        maxScale: 3,
        minScale: 0.3,
        scaleSpeed: 1.2,
        //pinch: true
        },
        trashcan: true, // 휴지통
        renderer: "zelos" // 제로스 테마
      }
    );
    Workspace1.addChangeListener(codeUpdate);  // 코드 갱신하기 메소드
    Workspace1.addChangeListener(whenSelected);// 선택 되었을 때 메소드
    
    let Workspace2 = Blockly.inject(
      "blocklyDiv2", {
        toolbox: toolbox,
        grid: {
          spacing: 0,
          length: 3,
          colour: '#ccc',
          snap: true
        },
        zoom: {
          controls: true,
          wheel: true,
          startScale: 1.0,
          maxScale: 3,
          minScale: 0.3,
          scaleSpeed: 1.2,
          //pinch: true
        },
        trashcan: true,
        renderer: "zelos" 
      }
    );
    Workspace2.addChangeListener(codeUpdate); 
    Workspace2.addChangeListener(whenSelected);
    
    let Workspace3 = Blockly.inject(
      "blocklyDiv3", {
        toolbox: toolbox,
        grid: {
          spacing: 0,
          length: 3,
          colour: '#ccc',
          snap: true
        },
        zoom: {
          controls: true,
          wheel: true,
          startScale: 1.0,
          maxScale: 3,
          minScale: 0.3,
          scaleSpeed: 1.2,
          //pinch: true
        },
        trashcan: true, 
        renderer: "zelos"
      }
    );
    Workspace3.addChangeListener(codeUpdate);  
    Workspace3.addChangeListener(whenSelected);

    //  코드 실행
    function beforeRun() {
      showCodeLoading();
      setTimeout(() => {
        runButton()
      }, 300);
    }

    $(document).ready(function () {

      // FIXME: 상기 로직에서 중복된 로직임. 주석 후 이상 없으면 제거할 것
      // 도전과제에 대한 사이드바를 출력하는 로직
      // var sidebarFlag = 0;
      // $(".ui.labeled.icon.sidebar").sidebar("setting", "dimPage", false); // Dim Out
      // $(".ui.labeled.icon.sidebar").sidebar("setting", "closable", false); // 마우스 클릭 시 No closing
      // $(".ui.labeled.icon.sidebar").sidebar("setting", "transition", "overlay"); // 오버레이

      // $("#sidebar_asgn").click(function () {
      //   if (sidebarFlag == 0) {
      //     //setPageSize(sidebarFlag);
      //     sidebarFlag = 1;
      //   } else {
      //     //setPageSize(sidebarFlag);
      //     sidebarFlag = 0;
      //   }
      //   $(".ui.labeled.icon.sidebar").sidebar("toggle");
      // })

      // // 데이터 사이언스
    })

    <% if(envMode == "spring") { %>
      // FIXME: 함수 적절한 위치로 이동시키던가 할 것.
      // 프로젝트 저장 시 input text 변경 이벤트
      function inputEvent() {
        $('.swal2-input').off().on('keyup', function () {
          $('#test_cnt').html("(" + $(this).val().length + " / 20)");
          if ($(this).val().length > 20) {
            $(this).val($(this).val().substring(0, 20));
            $('#test_cnt').html("(20 / 20)");
          }
        });
      }
      function textareaevent() {
        $('.swal2-textarea').off().on('keyup', function () {
          $('#test_cnt1').html("(" + $(this).val().length + " / 65)");
          if ($(this).val().length > 65) {
            $(this).val($(this).val().substring(0, 65));
            $('#test_cnt1').html("(65 / 65)");
          }
        });
      }
    <% } %>

  </script>

  <!-- pyodide 초기화 -->
  <!-- TODO: 여기에다가 js 파일을 둬야하는지에 대한 여부 체크 -->
  <script src="/js/utils/pyodide.js"></script>

  <script>
    function makeRuncode(code) {
      code2 = code.split("\n")
      code3 = []
      code4 = ""
      check = 0

      for (let a of code2) {
        s = a[0];
        console.log(s);
        if (s != ' ' && check == 1) {
          code3.push(code4);
          code4 = "";
          code4 += a + "\n";
          check = 0;
        }
        else if (s != ' ') {
          code3.push(code4);
          code4 = "";
          code4 += a + "\n";
          check = 0;
        }
        else {
          code4 += a + "\n";
          check = 1;
        }
      }
      code3.push(code4);
      console.log("code3 : ", code3);
      return code3;
    }


    
      //==================================
      // 블록을 실행했을 때 
      //==================================
      async function runButton() {
        // 그래프 위쪽 삭제
        $("#graph1").remove();
        $("#csv_show").before("<div id='graph1' style=\"height:500px; width:900;\"><img id='pyplotfigure' /></div>");
        // 그래프 위쪽 삭제

        // 그래프같은 이미지들을 싹다 잡아옴 plt.show()하면 바로 되는이유
        globalThis.iodide = {
          output: {
            element: (tagName) => {
              let outputPane = document.createElement(tagName);
              document.querySelector("#graph1").appendChild(outputPane);
              return outputPane;
            }
          }
        };

        Blockly.Python.addReservedWords('code');      // // 이 언어의 예약어 목록에 하나 이상의 단어를 추가한다.
        var code = pyEditor.getValue();               // py 코드미러의 값을 code로 저장
        Blockly.JavaScript.addReservedWords('code2'); // // 이 언어의 예약어 목록에 하나 이상의 단어를 추가한다.
        var code2 = jsEditor.getValue();              // js 코드미러의 값을 code2로 저장

        // 블록 코드 On/Off 에 따른 Flag에 따라 Code Editor로부터 가져오는 코드 분기
        flagBlockCode == 1 ? code = pyEditor.getValue() : code = asyncEditor.getValue();

        <% if(envMode == "spring") { %>
          /**
           * condition: spring
           * des: 도전과제일 때 사용자가 작성한 코드에 대해 정답 체크를 수행한다.
           */ 
          if(isChallenge == 1) {
            await checkAnswer(code);
          }
        <% } %>

        // 아래 코드를 사용하면 모두 자르는게 아니라 함수 단위나 블록 단위로 프로그램을 잘라줌 
        let codeArr = makeRuncode(code) // code.split("\n"); 

        // 이 부분이 코드 싹다 잡아와서 출력
        // 실행했을때 그래프를 지우고 하기 위해
        // plt.cla - 클리어
        // plt.clf - figure클리어
        // os는 data폴더 mount 에러 임시로 해결하기 위해
        // 코드 실행 전 초기화

        pyodideReadyPromise.then(() => {
          pyodide.runPython(`
                    import sys
                    import os 
                    import io
                    import matplotlib.pyplot as plt
                    plt.cla()
                    plt.clf()
                    sys.stdout = io.StringIO()
                    `)
          pyodide.runPythonAsync(`
import sys
import os 
import io
import matplotlib.pyplot as plt

# 그래프 그리려면 필요한 부분 start
from matplotlib.backends import backend_agg
if "pyodide" in sys.modules:
  from js import document, ImageData

def create_root_element1(self):
  div = document.createElement('div')
  document.querySelector("#graph1").appendChild(div)
  return div

f = plt.gcf()

#override create_root_element method of canvas by one of the functions above
f.canvas.create_root_element = create_root_element1.__get__(f.canvas, f.canvas.__class__)
f.canvas.show()
# 그래프 그리려면 필요한 부분 end

sys.stdout = io.StringIO()
                		`);
        });
        // 코드상 에러 구현
        if (code) {
          if (code.indexOf("os.chdir") != -1) {
            let current_path = pyodide.runPython(`os.getcwd()`); // 현재 경로 받아옴
            let dir_list = pyodide.runPython(`os.listdir()`); // 디렉토리 비교하기 위해
            let root_list = pyodide.runPython(`os.listdir('/')`);

            let start_index = code.indexOf("os.chdir(");
            let end_index = code.indexOf(")", start_index);

            let replace_str = code.substr(start_index, (end_index - (start_index - 1)))

            // 1. start_index부터 앞쪽으로 검색하여 개행이 어디 있는 지 확인하고, 몇번째 문자인지 변수에 저장
            let err_index = (start_index + 10) - (code.lastIndexOf("\n", start_index + 10) - 1);

            // 2. start_index부터 앞쪽으로 검색하여 개행이 몇개인지 파악하고, 몇번째 라인인지 확인
            let err_str = code.substr(0, start_index + 10);
            let err_line = err_str.match(/\n/g);
            if (err_line === null)
              err_line = 1;
            else
              err_line = err_str.match(/\n/g).length + 1;

            let err_dir = code.substr(start_index + 10, ((end_index - 2) - (start_index + 10 - 1)))

            let output_err = "Error: Traceback (most recent call last):"
            let output_err2 = "File \"/lib/python3.8/site-packages/pyodide/_base.py\", line 70, in eval_code"
            let output_err3 = "eval(compile(mod, \"<exec>\", mode=\"exec\"), ns, ns)"
            let output_err4 = "File \"<exec>\", line " + String(err_line) + ", in <module>"
            let output_err5 = "FileNotFoundError: [Errno 2] No such file or directory: "

            if (current_path.indexOf("/data") != -1) { // data 하위 디렉토리 모두 적용

              let dir_index;
              let bool_;

              for (dir_index = 0; dir_index < dir_list.length; dir_index++) {
                if (dir_list[dir_index] == err_dir || err_dir.indexOf('/') != -1 || err_dir.indexOf('../') != -1) {
                  bool_ = false;
                  break;
                } else if (err_dir == '..' || err_dir == '.') {
                  bool_ = false;
                  break;
                } else
                  bool_ = true;
              }

              if (dir_list.length == 0 && !(err_dir.indexOf('/') != -1 || err_dir.indexOf('../') != -1 || err_dir == '..' || err_dir == '.'))
                bool_ = true; // 디렉토리 내부가 비어 있을 때도 적용

              if (bool_ == true) {
                code = code.replace(code, '');
                //code = code.replace(replace_str, '"' + output_err + '"');
                code = "print('" + output_err + "')";
                code = code + ("\nprint(' " + output_err2 + "')");
                code = code + ("\nprint('  " + output_err3 + "')");
                code = code + ("\nprint(' " + output_err4 + "')");
                code = code + ('\nprint("' + output_err5 + "'" + err_dir + "'" + '")');
              };
            };
          };

          // 크롤링 req.text부분 처리
          if (code.indexOf("req.text") != -1) {
            code = code.replace("req.text", 'req');
          };
        };

        // 순차적 실행을 위해 놓은 코드 async, .then()
        async function runcode() {
          "use strict";
          // pyodide.globals.clear();
          await pyodideReadyPromise;
          var exe = document.getElementById('exeArea'); // 콘솔 창 ID가져옴
          try {
            exe.innerHTML = pyodide.runPython(code);
            let stdout = pyodide.runPython("sys.stdout.getvalue()"); // 결과값을 싹 받아줌
            // TODO: 도전과제 로직과 관련된거 같은데 정확히 기억 안남... 나중에 처리하기
            // let trueIndex = stdout.lastIndexOf("True");
            // let falseIndex = stdout.lastIndexOf("False");
            exe.innerHTML = stdout;
            runCodeConsole(stdout); //결과값을 콘솔 변수에 저장해둠

            <% if(envMode == "spring") { %>
              if(isChallenge == 1 && answerErr == 0) {
                // 도전과제 정답일 경우
                for (var i = 0; i < Object.keys(answerResJson["answer_result"]).length; i++) {
                  exe.innerHTML += ((i + 1) + "번째 결과 : " + answerResJson["answer_result"][i + 1] + "\n");
                }
              } else if(isChallenge == 1 && answerErr == 1) {
                // 도전과제 정답이 아닐 경우
                console.log("도전과제 채점 중 내부 오류 발생.");
                pyodide.runPython(code + "\nuser_logic('1234')");
                let stdout = pyodide.runPython("sys.stdout.getvalue()");
                // TODO: 도전과제 로직과 관련된거 같은데 정확히 기억 안남... 나중에 처리하기
                // let trueIndex = stdout.lastIndexOf("True");
                // let falseIndex = stdout.lastIndexOf("False");
                exe.innerHTML = stdout;
              }
            <% } %>
            exe.scrollTop = exe.scrollHeight; // 스크롤 아래로 유지
          } catch (e) {
            if (e.toString().indexOf('FileNotFoundError') != -1 && code.toString().indexOf("pd.read_csv") != -1)
              exe.innerHTML = '파일 경로를 확인해주세요\n'
            else if (e.toString().indexOf('NameError') != -1 && code.toString().indexOf("pd.read_csv") != -1)
              exe.innerHTML = '파일 경로를 입력해주세요\n'
            else
              exe.innerHTML = e;

            <% if(envMode == "spring") { %>
              /**
               *  condition: spring
               *  des: 실행 후 오류가 발생하였을 때 에러 로그를 기록하고 서버에 전송한다.
               */ 
              // TODO: 서버로 전송할 수 있는 형태인지 확인 필요
              error = e.message.split(/\r\n|\n|\r/);
              error = error[error.length - 2];
              errorCriterionIdx = error.indexOf(':');
              errorName = error.substring(0, errorCriterionIdx);
              errorMsg = error.substring(errorCriterionIdx + 1);
              recordErrorNameArr.push(errorName);
              recordErrorMsgArr.push(errorMsg);
              errorJSON = JSON.stringify({ "err_name": recordErrorNameArr, "err_msg": recordErrorMsgArr });

              sendToSession(errorJSON, "error_data");
            <% } %>
          } finally {
            $("#loading_dimmer").removeClass("active");

            <% if(envMode == "spring") { %>
              // 코드 실행이 끝나고 서버에 로그 전송
              sendDataToServer();

              /**
               *  condition: spring
               *  des: 도전과제 최종 결과 체크
               */ 
              // FIXME: 스프링과 파이썬 연동 로직 재작성 후 다시 테스트 할 것.
              if(isChallenge == 1) {
                let final_result = answerResJson["final_result"];
                let isAlreadyFinished; // 이전 도전과제 해결 여부
                if (final_result) {
                  $.ajax({
                    url: "/challenge/success.do",
                    type: "POST",
                    async: false,
                    ///////////////////////////////////////
                    // challenge Seq 알맞게 넣을 것
                    ///////////////////////////////////////
                    data: { challenge_seq: "${challengeId}" },
                    dataType: "text",
                    success: function (anTq) {
                      isAlreadyFinished = anTq;
                    }
                  })
                  if (isAlreadyFinished == "0") {
                    Swal.fire({
                      icon: 'success',
                      title: "성공!",
                      html: "축하합니다!<br>도전과제를 해결하였습니다!",
                      confirmButtonText: "확인 및 나가기",
                      showCancelButton: "닫기"
                    }).then((result) => {
                      if (result.isConfirmed) {
                        location.href = "/challenge/main.do";
                      }
                    })
                  } else if (isAlreadyFinished == "1") {
                    Swal.fire({
                      icon: 'success',
                      title: "성공!",
                      html: "이미 해결한 도전과제입니다.",
                      confirmButtonText: "확인 및 나가기",
                      showCancelButton: "닫기"
                    }).then((result) => {
                      if (result.isConfirmed) {
                        location.href = "/challenge/main.do";
                      }
                    })
                  }
                } else {
                  Swal.fire({
                    icon: 'error',
                    title: "실패",
                    html: "결과가 올바르지 않습니다.<br>다시 시도해보세요.",
                    confirmButtonText: "다시풀기"
                  })
                }
              }
            <% } %>
          }
        }

        // runcode끝내고 또 돌림, 테이블 형식 블록을위해 이걸 넣어줌
        runcode().then(() => {
          if (eval(code2) == undefined) {
            document.getElementById('exeArea').innerHTML += '\n';
          } else {
            console.log("error : javascript code error");
          }
        });
      }
      
      // runCode() 결과 값 변수에 저장해둠
      function runCodeConsole(result){
        if(flagBlockCode == 0){
            offConsole = result;
        } else {
            var b = workspaceCheck();
            if(b == Workspace1) {
                tab1Console = result;
            } else if(b == Workspace2) {
                tab2Console = result;
            } else if(b == Workspace3) {
                tab3Console = result;
            } 
        }
      }

    </script>
    <!-- csv를 테이블로 출력-->
    <script src="/js/utils/csvTablePrint.js"></script>
    <!-- 라이브러리 임포트 기능 테스트 -->
    <script src="/js/utils/libraryAdd.js"></script>
    <!-- prompt 설정 -->
    <script src="/js/utils/prompt.js"></script>
    <!-- 로컬 파일 오픈하기 -->
    <script src="/js/utils/localFileOpen.js"></script>
    <!-- 로컬로 파일 다운로드-->
    <script src="/js/utils/fileDownload.js"></script>


    <!-- 로컬 파일 오픈하기 -->
    <script>

    </script>

    <!-- 기본 블럭+코드 배치 -->
    <script>

      if(projectType == 1) {
        visibleAll()
      } else if(projectType == 2) {
        visibleCode();
      }

      <% if(envMode == "spring") { %>
        /**
         *  condition: spring
         *  des:  사용자가 프로젝트를 통해 에디터 접근 시, 프로젝트 타입에 따라 상단의 
         *        워크스페이스 화면 제어(블록, 코드 변경 등) 버튼 삭제
         */ 
        if(projectId != -1) {
          if (projectType == 1) {
            $(".btn-group .codebBtn").eq(2).remove()
          } else if(projectType == 2) {
            $(".btn-group").remove()
            $("#btn_block_code").remove()
          }
          $(".thisProjectBtn").show()
        }
      <% } %>


	// 블록클리 리사이즈 이벤트 등록
	new ResizeSensor(jQuery('#blocklyDiv1'), function () {
	  Blockly.svgResize(Workspace1);
	});
	new ResizeSensor(jQuery('#blocklyDiv2'), function () {
	  Blockly.svgResize(Workspace2);
	});
	new ResizeSensor(jQuery('#blocklyDiv3'), function () {
	  Blockly.svgResize(Workspace3);
	});

  let eachTabCode;

  $('.tabImg').click(function(){
    var tab_id = $(this).attr('data-tab');

    if(tab_id == "tab-1"){
      eachTabCode = Blockly.Python.workspaceToCode(Workspace1);
      pyEditor.setValue(eachTabCode);
    } else if(tab_id == "tab-2"){
      eachTabCode = Blockly.Python.workspaceToCode(Workspace2);
      pyEditor.setValue(eachTabCode);
    } else if(tab_id == "tab-3"){
      eachTabCode = Blockly.Python.workspaceToCode(Workspace3);
      pyEditor.setValue(eachTabCode);
    }

    var exe = document.getElementById('exeArea');
    exe.innerHTML = tabClickConsole(tab_id);
  })

  // $('#tab_1').on('click',() => {
  //   eachTabCode = Blockly.Python.workspaceToCode(Workspace1);
  //   pyEditor.setValue(eachTabCode);

  //   var exe = document.getElementById('exeArea');
  //   exe.innerHTML = tabClickConsole('tab1');
  // });
  // $('#tab_2').on('click',() => {
  //   eachTabCode = Blockly.Python.workspaceToCode(Workspace2);
  //   pyEditor.setValue(eachTabCode);
  //   var exe = document.getElementById('exeArea');
  //   exe.innerHTML = tabClickConsole('tab2');
  // });
  // $('#tab_3').on('click',() => {
  //   eachTabCode = Blockly.Python.workspaceToCode(Workspace3);
  //   pyEditor.setValue(eachTabCode);
  //   var exe = document.getElementById('exeArea');
  //   exe.innerHTML = tabClickConsole('tab3');
  // });

  // 탭 이동시 콘솔창 값 변화
  // FIXME: 블록 코드 On/OFF, 코드 창일 때 탭 변화에 대해서 고쳐야할 수도...
  function tabClickConsole(tabNum){
    if(flagBlockCode == 0){
        return offConsole;
    } else {
        if(tabNum == 'tab-1') {
            return tab1Console;
        } else if(tabNum == 'tab-2') {
            return tab2Console;
        } else if(tabNum == 'tab-3') {
            return tab3Console;
        } 
    }
  }
    </script>

    <!-- menu UI & menu setup -->
    <script src="/js/zeynep/config.js"></script>
    <!-- 기태 처리 (파일) 끝 20.12.29 ------------------------------------------------------------------------->

<!-- 기태 추가(단축키)-->
<script>
  // 단축키 기능 추가 (ctrl + F11 실행 / ctrl + F10 결과 지우기 / ctrl + F9 블록 지우기 )
  let isCtrl;
  $(document).keyup(({ keyCode }) => {
    if (keyCode == 17) {
      isCtrl = false;
    }
  });

  $(document).keydown(({ keyCode }) => {

    if (keyCode == 17) {
      isCtrl = true;
    }

    if (keyCode == 122 && isCtrl == true) {
      runButton();
    }

    if (keyCode == 121 && isCtrl == true) {
      resetConsole();
    }

    if (keyCode == 120 && isCtrl == true) {
      resetWorkspace();
    }
  });

  /**
   *  condition: node / spring
   *  des: 브라우저 윈도우 종료 시 세션 종료, 세션 스토리지 제거, 서버에 로그 전송을 수행한다.
   */ 
  // TODO: 정교화 및 추후 로직 분리 고려
  // TODO: 뒤로가기 시 세션 종료(?)
  // TODO: Alert가 꼭 필요할까? 어떻게 없애지?
  window.onbeforeunload = function (event) {
    event.preventDefault();

    // FIXME: 로그 전송 로직 재작성 후 주석 풀기
    <% if(envMode == "spring") { %>
      // sendDataToServer();
    <% } %>

    sessionStorage.clear();

    $.ajax({
      url: '/user/exit',
      method: 'GET'
    });

    return "";
  }
</script>

</body>
<!--camera
<script src="/js/blockly/cam.js"></script>
<script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
-->

</html>